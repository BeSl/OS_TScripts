//*****************************************************************
// Библиотека: TFile
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 11.05.2017
//

//*****************************************************************
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ

// Переменная для возврата ошибки, если таковая имела место быть
Перем ТекстОшибки Экспорт;

//*****************************************************************
// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
Процедура ИнициализироватьСтруктуруИнформацииОФайле(ОбъектДляИнициализации)

	СтруктураПараметров = Новый Структура;
	
	// Имя файла (Name)
	СтруктураПараметров.Вставить("Имя");
	// Имя родительского каталога (ParentFolder.Path)
	СтруктураПараметров.Вставить("Каталог");
	// Полный путь к файлу (Path)
	СтруктураПараметров.Вставить("Путь");
	// Буква диска, на котором находится файл (Drive.DriveLetter)
	СтруктураПараметров.Вставить("БукваДиска");
	// Базовое имя файла - имя без расширения (GetBaseName())	
	СтруктураПараметров.Вставить("ИмяБезРасширения");
	// Расширение файла - имя без расширения (GetExtensionName())	
	СтруктураПараметров.Вставить("Расширение");
	// Тип файла, информация, похожая на ту, которую можно увидеть в палитре свойств файла в проводнике (Type)	
	СтруктураПараметров.Вставить("Тип");
	
	// Обычный файл (нет атрибутов) (Normal)
	СтруктураПараметров.Вставить("Обычный");
	// Файл только для чтения (ReadOnly)
	СтруктураПараметров.Вставить("ТолькоЧтение");
	// Скрытый (Hidden)
	СтруктураПараметров.Вставить("Скрытый");
	// Системный (System)
	СтруктураПараметров.Вставить("Системный");
	// Диск (Volume)
	СтруктураПараметров.Вставить("Диск");
	// Каталог или файл (Directory)
	СтруктураПараметров.Вставить("ЭтоКаталог");
	// Архивный (Archive)
	СтруктураПараметров.Вставить("Архивный");
	// Ссылка или ярлык (Alias)
	СтруктураПараметров.Вставить("ЭтоЯрлык");
	// Сжатый (Compressed)
	СтруктураПараметров.Вставить("Сжатый");
	
	// Дата создания файла (DateCreated)
	СтруктураПараметров.Вставить("ДатаСоздания");
	// Дата последнего доступа к файлу (DateLastAccessed)
	СтруктураПараметров.Вставить("ДатаПоследнегоДоступа");
	// Дата последней модификации файла (DateLastModified)
	СтруктураПараметров.Вставить("ДатаПоследнегоИзменения");	
	// Размер файла в байтах (Size)	
	СтруктураПараметров.Вставить("Размер");
	// Размер файла в килобайтах
	СтруктураПараметров.Вставить("РазмерКб");
	// Размер файла в мегабайтах	
	СтруктураПараметров.Вставить("РазмерМб");	
	
	// Для таблицы создадим колонки
	Если Тип(ОбъектДляИнициализации) = Тип("КоллекцияКолонокТаблицыЗначений") Тогда	
		Для Каждого Параметр Из СтруктураПараметров Цикл
			ОбъектДляИнициализации.Добавить(Параметр.Ключ);
		КонецЦикла;
	Иначе
		ОбъектДляИнициализации = СтруктураПараметров;
	КонецЕсли;
	
	//Текст ошибки
	ТекстОшибки = "";
	
КонецПроцедуры

//*****************************************************************
Процедура ЗаполнитьИнформациюОФайле(файл, СтруктураПараметров)

	// Считываем параметры
	СуммаФлагов = Файл.Attributes;
	Если СуммаФлагов = 0 Тогда	
		СтруктураПараметров.Обычный = Истина;
	КонецЕсли;
	Если СуммаФлагов >= 2048 Тогда	
		СтруктураПараметров.Сжатый = Истина;
		СуммаФлагов = СуммаФлагов - 2048;
	КонецЕсли;
	Если СуммаФлагов >= 1024 Тогда	
		СтруктураПараметров.ЭтоЯрлык = Истина;
		СуммаФлагов = СуммаФлагов - 1024;
	КонецЕсли;
	Если СуммаФлагов >= 32 Тогда	
		СтруктураПараметров.Архивный = Истина;
		СуммаФлагов = СуммаФлагов - 32;
	КонецЕсли;
	Если СуммаФлагов >= 16 Тогда	
		СтруктураПараметров.ЭтоКаталог = Истина;
		СуммаФлагов = СуммаФлагов - 16;
	КонецЕсли;
	Если СуммаФлагов >= 8 Тогда	
		СтруктураПараметров.Диск = Истина;
		СуммаФлагов = СуммаФлагов - 8;
	КонецЕсли;
	Если СуммаФлагов >= 4 Тогда	
		СтруктураПараметров.Системный = Истина;
		СуммаФлагов = СуммаФлагов - 4;
	КонецЕсли;
	Если СуммаФлагов >= 2 Тогда	
		СтруктураПараметров.Скрытый = Истина;
		СуммаФлагов = СуммаФлагов - 2;
	КонецЕсли;
	Если СуммаФлагов >= 1 Тогда	
		СтруктураПараметров.ТолькоЧтение = Истина;
		СуммаФлагов = СуммаФлагов - 1;
	КонецЕсли;
	СтруктураПараметров.ДатаСоздания = Файл.DateCreated;
	СтруктураПараметров.ДатаПоследнегоДоступа = Файл.DateLastAccessed;
	СтруктураПараметров.ДатаПоследнегоИзменения = Файл.DateLastModified;
	СтруктураПараметров.БукваДиска = Файл.Drive.DriveLetter;
	СтруктураПараметров.Имя = Файл.Name;
	СтруктураПараметров.Каталог = Файл.ParentFolder.Path;
	СтруктураПараметров.Путь = Файл.Path;
	СтруктураПараметров.Размер = файл.Size;
	СтруктураПараметров.РазмерКб = Окр(СтруктураПараметров.Размер / 1024,2);
	СтруктураПараметров.РазмерМб = Окр(СтруктураПараметров.РазмерКб / 1024,2);
	СтруктураПараметров.Тип = Файл.Type;
	
	// Считаем, что проблем с созданиием COMОбъекта нет, т. к. уже создавали ранее
	ФСО = Новый COMОбъект("Scripting.FileSystemObject");
	СтруктураПараметров.ИмяБезРасширения = ФСО.GetBaseName(СтруктураПараметров.Путь);
	СтруктураПараметров.Расширение = ФСО.GetExtensionName(СтруктураПараметров.Путь);	
	
КонецПроцедуры

//*****************************************************************
Процедура РекурсивноеЗаполнениеИнформацииОФайлах(Каталог, ТаблицаДанных, ВключаяВложенныеКаталоги)

	// Итерации свойственны людям, рекурсия - Божественна!

	// Просмотрим вложенные каталоги, если необходимо
	Если ВключаяВложенныеКаталоги Тогда	
		Для Каждого Подкаталог Из Каталог.SubFolders Цикл
			РекурсивноеЗаполнениеИнформацииОФайлах(Подкаталог, ТаблицаДанных, ВключаяВложенныеКаталоги);
		КонецЦикла;
	КонецЕсли;
	
	// Считываем параметры
	Файлы = Каталог.Files;
	Для Каждого Файл Из Файлы Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьИнформациюОФайле(файл,СтрокаДанных);
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************
Процедура РекурсивноеУдалениеПустыхКаталогов(Каталог, ВерхнийКаталог = "")

	// Итерации свойственны людям, рекурсия - Божественна!

	Для Каждого Подкаталог Из Каталог.SubFolders Цикл
		РекурсивноеУдалениеПустыхКаталогов(Подкаталог);
	КонецЦикла;
	
	// Удалим каталог, если в нем нет ни файлов ни подкаталогов
	Если Каталог.Files.Count = 0 И Каталог.SubFolders.Count = 0
		И Каталог.Path <> ВерхнийКаталог Тогда
		УдалитьФайлы(Каталог.Path);
	КонецЕсли;
		
КонецПроцедуры	


//*****************************************************************
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
// Собирает информацию о дисках системы
//
// Параметры:
//	БуквыДисков - Строка - Строка, содержащая буквы дисков для анализа. Если не указана, собирается информация о всех дисках.
//	ТолькоГотовые - Булево - Если значение ИСТИНА, тогда будут анализироваться только диски, готовые к использованию.
//
// Возвращает: 
//	Таблица значений, с данными о каждом попавшем в выборку диске.
//	Колонки таблицы:
// 		Буква - Буква диска (DriveLetter) - строка - буква, ассоциированная с ресурсом.
// 		Готов - Готов (IsReady) - булево - Истина, если устройство готово, иначе - Ложь. Актуально для устройства со сменным носителем или CD-ROM.
// 		Тип - Тип диска (DriveType) - число - определяет тип ресурса. Возможные значения:
//			0 - неизвестное устройство.
//			1 - устройство со сменным носителем.
//			2 - жёсткий диск.
//			3 - сетевой диск.
//			4 - CD-ROM.
//			5 - RAM-диск.
// 		ФайловаяСистема - Файловая система (FileSystem) - cтрока - тип файловой системы (FAT, NTFS или CDFS).
// 		Путь - Путь (Path) - строка - путь к диску (например, "C:", но не "C:\").
// 		СетевоеИмя - Сетевое имя (ShareName) - строка - сетевое имя диска, если диск сетевой (иначе - пустая строка).
// 		МеткаТома - Метка тома (VolumeName) - строка - метка тома диска.
// 		СерийныйНомер - Серийный номер (SerialNumber) - число - десятичный серийный номер диска.
// 		ОбщийОбъемМб - Общий объем диска (TotalSize) - число - общий объём диска в мегабайтах.  
// 		ДоступноМб - Доступнно МБ (AvailableSpace) - число - количество доступного для пользователя места на диске в мегабайтах.
// 		Свободно МБ (FreeSpace) - число - количество свободного места на диске в мегабайтах.
// 
Функция ИнформацияОДисках(БуквыДисков="", ТолькоГотовые = Истина) Экспорт

	//Создадим COMОбъект
	Попытка
		ФСО = Новый COMОбъект("Scripting.FileSystemObject");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//Выходная таблица
	ТаблицаДанных = Новый ТаблицаЗначений;
	// Буква диска (DriveLetter) - строка - буква, ассоциированная с ресурсом.
	ТаблицаДанных.Колонки.Добавить("Буква");
	// Готов (IsReady) - булево - Истина, если устройство готово, иначе - Ложь. Актуально для устройства со сменным носителем или CD-ROM.
	ТаблицаДанных.Колонки.Добавить("Готов");
	// Тип диска (DriveType) - число - определяет тип ресурса. Возможные значения:
	//	0 - неизвестное устройство.
	//	1 - устройство со сменным носителем.
	//	2 - жёсткий диск.
	//	3 - сетевой диск.
	//	4 - CD-ROM.
	//	5 - RAM-диск.
	ТаблицаДанных.Колонки.Добавить("Тип");
	// Файловая система (FileSystem) - cтрока - тип файловой системы (FAT, NTFS или CDFS).
	ТаблицаДанных.Колонки.Добавить("ФайловаяСистема");	
	// Путь (Path) - строка - путь к диску (например, "C:", но не "C:\").
	ТаблицаДанных.Колонки.Добавить("Путь");
	// Сетевое имя (ShareName) - строка - сетевое имя диска, если диск сетевой (иначе - пустая строка).
	ТаблицаДанных.Колонки.Добавить("СетевоеИмя");
	// Метка тома (VolumeName) - строка - метка тома диска.
	ТаблицаДанных.Колонки.Добавить("МеткаТома");
	// Серийный номер (SerialNumber) - число - десятичный серийный номер диска.
	ТаблицаДанных.Колонки.Добавить("СерийныйНомер");	
	// Общий объем диска (TotalSize) - число - общий объём диска в мегабайтах.  
	ТаблицаДанных.Колонки.Добавить("ОбщийОбъемМб");		
	// Доступнно МБ (AvailableSpace) - число - количество доступного для пользователя места на диске в мегабайтах.
	ТаблицаДанных.Колонки.Добавить("ДоступноМб"); 	
	// Свободно МБ (FreeSpace) - количество свободного места на диске в мегабайтах.
	ТаблицаДанных.Колонки.Добавить("СвободноМб");
	
	//Цикл по всем дискам
	Для Каждого Диск ИЗ ФСО.Drives Цикл
	
		// Отбор по буквам, если необходимо 
		Если БуквыДисков <> "" И СтрНайти(БуквыДисков,Диск.DriveLetter) = 0 Тогда
			Продолжить;
		КонецЕсли;			
	
		// Отбор по готовым, если необходимо
		Если ТолькоГотовые И НЕ Диск.IsReady Тогда
			Продолжить;
		КонецЕсли;
	
		// Собираем информацию по диску
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Буква = Диск.DriveLetter;
		СтрокаДанных.Готов = Диск.IsReady;
		СтрокаДанных.Тип = Диск.DriveType;
		СтрокаДанных.Путь = Диск.Path;
		СтрокаДанных.СетевоеИмя = Диск.ShareName;
		Если СтрокаДанных.Готов Тогда
			СтрокаДанных.ФайловаяСистема = Диск.FileSystem;
			СтрокаДанных.МеткаТома = Диск.VolumeName;
			СтрокаДанных.СерийныйНомер = Диск.SerialNumber;
			СтрокаДанных.ОбщийОбъемМб = Окр(Диск.TotalSize / 1024 / 1024); //Данные в Мб
			СтрокаДанных.ДоступноМб = Окр(Диск.AvailableSpace / 1024 / 1024); //Данные в Мб
			СтрокаДанных.СвободноМб = Окр(Диск.FreeSpace / 1024 / 1024); //Данные в Мб
		Иначе
			СтрокаДанных.ФайловаяСистема = "";
			СтрокаДанных.МеткаТома = "";
			СтрокаДанных.СерийныйНомер = "";
			СтрокаДанных.ОбщийОбъемМб = 0;
			СтрокаДанных.ДоступноМб = 0;
			СтрокаДанных.СвободноМб = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

//*****************************************************************
// Собирает инфорамцию о файле или каталоге
//
// Параметры:
//	ПутьКФайлу - Строка - Путь к файлу, о котором собираются сведения
//
// Возвращает:
//	Стрктура с данными о файле
//	Поля структуры:
// 		Имя - Строка - Имя файла (Name)
// 		Каталог - Строка - Имя родительского каталога (ParentFolder.Path)
// 		Путь - Строка - Полный путь к файлу (Path)
// 		БукваДиска - Строка - Буква диска, на котором находится файл (Drive.DriveLetter)
// 		ИмяБезРасширения - Строка - Базовое имя файла - имя без расширения (GetBaseName())	
// 		Расширение - Строка - Расширение файла - имя без расширения (GetExtensionName())	
//		Тип - Строка - Тип файла, информация, похожая на ту, которую можно увидеть в палитре свойств файла в проводнике (Type)	
// 		Обычный - Булево - Обычный файл (нет атрибутов) (Normal)
// 		ТолькоЧтение - Булево - Файл только для чтения (ReadOnly)
// 		Скрытый - Булево - Скрытый (Hidden)
// 		Системный - Булево - Системный (System)
// 		Диск - Булево - Диск (Volume)
// 		ЭтоКаталог - Булево - Каталог или файл (Directory)
// 		Архивный - Булево - Архивный (Archive)
// 		ЭтоЯрлык - Булево - Ссылка или ярлык (Alias)
// 		Сжатый - Булево - Сжатый (Compressed)
// 		ДатаСоздания - Дата - Дата создания файла (DateCreated)
// 		ДатаПоследнегоДоступа - Дата - Дата последнего доступа к файлу (DateLastAccessed)
// 		ДатаПоследнегоИзменения - Дата - Дата последней модификации файла (DateLastModified)
// 		Размер - Число - Размер файла в байтах (Size)	
// 		РазмерКб - Число - Размер файла в килобайтах
// 		РазмерМб - Число - Размер файла в мегабайтах	
//	
Функция ИнформацияОФайле(ПутьКФайлу) Экспорт

	//Создадим COMОбъект
	ТекстОшибки = "";
	Попытка
		ФСО = Новый COMОбъект("Scripting.FileSystemObject");
		Если ФСО.FileExists(ПутьКФайлу) Тогда
			Файл = ФСО.GetFile(ПутьКФайлу);
		ИначеЕсли ФСО.FolderExists(ПутьКФайлу) Тогда	
			Файл = ФСО.GetFolder(ПутьКФайлу);
		Иначе
			ТекстОшибки = "Файл или каталог не найдены по заданному пути";
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	Если ТекстОшибки <> "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ФСО = Новый COMОбъект("Scripting.FileSystemObject");
		Файл = ФСО.GetFile(ПутьКФайлу);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	//Выходная структруа
	СтруктураПараметров = Новый Структура;
	ИнициализироватьСтруктуруИнформацииОФайле(СтруктураПараметров);
	
	// Считываем параметры
	ЗаполнитьИнформациюОФайле(файл,СтруктураПараметров);	
	
	Возврат СтруктураПараметров;
	
КонецФункции

//*****************************************************************
// Собирает инфорамцию о всех файлах в каталоге
//
// Параметры:
//	ПутьКаталогу - Строка - Путь к каталогу, в котором собираются сведения о файлах
//	ВключаяВложенныеКаталоги - Булево - Если значение ИСТИНА, то поиск будет проходить и в подкаталогах
//
// Возвращает:
//	Таблица значений, с данными о каждом попавшем в выборку файле.
//	Колонки таблицы:
// 		Имя - Строка - Имя файла (Name)
// 		Каталог - Строка - Имя родительского каталога (ParentFolder.Path)
// 		Путь - Строка - Полный путь к файлу (Path)
// 		БукваДиска - Строка - Буква диска, на котором находится файл (Drive.DriveLetter)
// 		ИмяБезРасширения - Строка - Базовое имя файла - имя без расширения (GetBaseName())	
// 		Расширение - Строка - Расширение файла - имя без расширения (GetExtensionName())	
//		Тип - Строка - Тип файла, информация, похожая на ту, которую можно увидеть в палитре свойств файла в проводнике (Type)	
// 		Обычный - Булево - Обычный файл (нет атрибутов) (Normal)
// 		ТолькоЧтение - Булево - Файл только для чтения (ReadOnly)
// 		Скрытый - Булево - Скрытый (Hidden)
// 		Системный - Булево - Системный (System)
// 		Диск - Булево - Диск (Volume)
// 		ЭтоКаталог - Булево - Каталог или файл (Directory)
// 		Архивный - Булево - Архивный (Archive)
// 		ЭтоЯрлык - Булево - Ссылка или ярлык (Alias)
// 		Сжатый - Булево - Сжатый (Compressed)
// 		ДатаСоздания - Дата - Дата создания файла (DateCreated)
// 		ДатаПоследнегоДоступа - Дата - Дата последнего доступа к файлу (DateLastAccessed)
// 		ДатаПоследнегоИзменения - Дата - Дата последней модификации файла (DateLastModified)
// 		Размер - Число - Размер файла в байтах (Size)	
// 		РазмерКб - Число - Размер файла в килобайтах
// 		РазмерМб - Число - Размер файла в мегабайтах	
//
Функция ИнформацияОФайлах(ПутьКаталогу, ВключаяВложенныеКаталоги = Ложь) Экспорт

	//Создадим COMОбъект
	Попытка
		ФСО = Новый COMОбъект("Scripting.FileSystemObject");
		Каталог = ФСО.GetFolder(ПутьКаталогу);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//Выходная таблица
	ТаблицаДанных = Новый ТаблицаЗначений;
	ИнициализироватьСтруктуруИнформацииОФайле(ТаблицаДанных.Колонки);
	
	// Считываем параметры
	РекурсивноеЗаполнениеИнформацииОФайлах(Каталог, ТаблицаДанных, ВключаяВложенныеКаталоги);
	
	Возврат ТаблицаДанных;
	
КонецФункции


//*****************************************************************
// Удаляет все файлы с датой создания более ранней, чем указанная дата
//
// Параметры:
//	ПутьКаталогу - Строка - Путь к каталогу, в котором происходит удаление файлов
//	ДатаДляПроверки - Дата - Дата для сравнения с датой создания
//	Маска - Строка - Маска файлов для удаления, если не задана - все файлы
//	ВключаяВложенныеКаталоги - Если значение ИСТИНА, то будут просматриваться и вложенные подкаталоги
//
Процедура УдалитьФайлыСозданныеРаннееДаты(ПутьКаталогу, ДатаДляПроверки, Маска = "", ВключаяВложенныеКаталоги = Ложь) Экспорт

	Если Маска = "" Тогда
		Маска = ПолучитьМаскуВсеФайлы();
	КонецЕсли;

	МассивФайлов = НайтиФайлы(ПутьКаталогу, Маска, ВключаяВложенныеКаталоги);
	Для Каждого файл ИЗ МассивФайлов Цикл		
		Если ИнформацияОФайле(файл.ПолноеИмя).ДатаСоздания < ДатаДляПроверки Тогда
			УдалитьФайлы(файл.ПолноеИмя);
		КонецЕсли
	КонецЦикла

КонецПроцедуры

//*****************************************************************
// Удаляет все файлы с датой последнего изменения более ранней, чем указанная дата
//
// Параметры:
//	ПутьКаталогу - Строка - Путь к каталогу, в котором происходит удаление файлов
//	ДатаДляПроверки - Дата - Дата для сравнения с датой последнего изменения
//	Маска - Строка - Маска файлов для удаления, если не задана - все файлы
//	ВключаяВложенныеКаталоги - Если значение ИСТИНА, то будут просматриваться и вложенные подкаталоги
//
Процедура УдалитьФайлыИзмененныеРаннееДаты(ПутьКаталогу, ДатаДляПроверки, Маска = "", ВключаяВложенныеКаталоги = Ложь) Экспорт

	Если Маска = "" Тогда
		Маска = ПолучитьМаскуВсеФайлы();
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(ПутьКаталогу, Маска, ВключаяВложенныеКаталоги);
	Для Каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		Если ИнформацияОФайле(Файл.ПолноеИмя).ДатаПоследнегоИзменения < ДатаДляПроверки Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли
	КонецЦикла

КонецПроцедуры

//*****************************************************************
// Удаляет все файлы, для которых с даты создания прошло больше указанного количества дней
//
// Параметры:
//	ПутьКаталогу - Строка - Путь к каталогу, в котором происходит удаление файлов
//	КоличествоДнейДляПроверки - Число - Число дней для сравнения с датой создания
//	Маска - Строка - Маска файлов для удаления, если не задана - все файлы
//	ВключаяВложенныеКаталоги - Если значение ИСТИНА, то будут просматриваться и вложенные подкаталоги
//
Процедура УдалитьФайлыСозданныеБолееДнейНазад(ПутьКаталогу, КоличествоДнейДляПроверки, Маска = "", ВключаяВложенныеКаталоги = Ложь) Экспорт

	ДатаДляПроверки = ТекущаяДата() - КоличествоДнейДляПроверки * 24 * 60 * 60;
	УдалитьФайлыСозданныеРаннееДаты(ПутьКаталогу,ДатаДляПроверки,Маска,ВключаяВложенныеКаталоги);

КонецПроцедуры

//*****************************************************************
// Удаляет все файлы, для которых с даты последнего изменения прошло больше указанного количества дней
//
// Параметры:
//	ПутьКаталогу - Строка - Путь к каталогу, в котором происходит удаление файлов
//	КоличествоДнейДляПроверки - Число - Число дней для сравнения с датой последнего изменения
//	Маска - Строка - Маска файлов для удаления, если не задана - все файлы
//	ВключаяВложенныеКаталоги - Если значение ИСТИНА, то будут просматриваться и вложенные подкаталоги
//
Процедура УдалитьФайлыИзмененныеБолееДнейНазад(ПутьКаталогу, КоличествоДнейДляПроверки, Маска = "", ВключаяВложенныеКаталоги = Ложь) Экспорт

	ДатаДляПроверки = ТекущаяДата() - КоличествоДнейДляПроверки * 24 * 60 * 60;
	УдалитьФайлыИзмененныеРаннееДаты(ПутьКаталогу,ДатаДляПроверки,Маска,ВключаяВложенныеКаталоги);

КонецПроцедуры

//*****************************************************************
// Удаляет все пустые каталоги в указанной директории
//
// Параметры:
//	ПутьКаталогу - Строка - Путь к каталогу, в котором происходит удаление каталогов
//	ВключаяТекущийКаталог - Если значение ИСТИНА и текущий каталог пустой, то он также будет удаление
//
// Возвращает:
//	Истина - Ошибок не было
//	Ложь - Были ошибки
//
Функция УдалитьПустыеКаталоги(ПутьКаталогу, ВключаяТекущийКаталог=Ложь) Экспорт

	//Создадим COMОбъект
	Попытка
		ФСО = Новый COMОбъект("Scripting.FileSystemObject");
		Каталог = ФСО.GetFolder(ПутьКаталогу);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	РекурсивноеУдалениеПустыхКаталогов(Каталог, ?(ВключаяТекущийКаталог,"",Каталог.Path));	
	Возврат Истина;
	
КонецФункции


//*****************************************************************
// Преобразует исходную строку в транслит.
//
// Параметры:
//	ТекСтрока - Строка - Строка для перевода
//
// Возвращает:
//	Строка - Строка - Строка латиницй
//
Функция СтрокаЛатиницей(Знач ТекСтрока) Экспорт
	
	// Транслитерация, используемая в загранпаспортах 1997-2010.
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("а","a");
	Соответствие.Вставить("б","b");
	Соответствие.Вставить("в","v");
	Соответствие.Вставить("г","g");
	Соответствие.Вставить("д","d");
	Соответствие.Вставить("е","e");
	Соответствие.Вставить("ё","e");
	Соответствие.Вставить("ж","zh");
	Соответствие.Вставить("з","z");
	Соответствие.Вставить("и","i");
	Соответствие.Вставить("й","y");
	Соответствие.Вставить("к","k");
	Соответствие.Вставить("л","l");
	Соответствие.Вставить("м","m");
	Соответствие.Вставить("н","n");
	Соответствие.Вставить("о","o");
	Соответствие.Вставить("п","p");
	Соответствие.Вставить("р","r");
	Соответствие.Вставить("с","s");
	Соответствие.Вставить("т","t");
	Соответствие.Вставить("у","u");
	Соответствие.Вставить("ф","f");
	Соответствие.Вставить("х","kh");
	Соответствие.Вставить("ц","ts");
	Соответствие.Вставить("ч","ch");
	Соответствие.Вставить("ш","sh");
	Соответствие.Вставить("щ","shch");
	Соответствие.Вставить("ъ","""");
	Соответствие.Вставить("ы","y");
	Соответствие.Вставить("ь",""); // пропускается
	Соответствие.Вставить("э","e");
	Соответствие.Вставить("ю","yu");
	Соответствие.Вставить("я","ya");
	
	Результат = "";
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(ТекСтрока) Цикл
		Символ = Сред(ТекСтрока, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // Поиск соответствия без учета регистра.
		Если СимволЛатиницей = Неопределено Тогда
			// Другие символы остаются "как есть".
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	
	
//*****************************************************************
// Возвращает имя файла, построенном по принципу: ИмяБазы + ДатаВремя + Расширение
// Пример: Base_2017_04_28_19_02_12.dt
//
// Параметры:
//	БазовоеИмя - Строка - Базовое имя для формирования файла
//	Расширение - Строка - Расширение файла
//	ДатаИмени - Дата - Дата для формирования имени файла
//
// Возвращает:
//	ИмяФайла - Строка - Имя получившегося файла
//
Функция ИмяФайлаНаДату(Знач БазовоеИмя, Расширение, Знач ДатаИмени="", ПеревестиВЛатиницу=Ложь) Экспорт

	//Если дата не задана, будет использоваться текущая дата
	Если ДатаИмени = "" Тогда
		ДатаИмени = ТекущаяДата();
	КонецЕсли;
	
	//Переведем в латиницу
	Если ПеревестиВЛатиницу Тогда
		БазовоеИмя = СтрокаЛатиницей(БазовоеИмя);
	КонецЕсли;
	
	Возврат СокрЛП(БазовоеИмя) + Формат(ДатаИмени,"ДФ=_yyyy_MM_dd_ЧЧ_мм_сс") + "." + Расширение;

КонецФункции

//*****************************************************************
// Убирает символ "\" в конце строки
// Параметры:
//	Путь - Строка - Строка для обработки
//
// Возвращает:
//	Путь - Строка - обработанная строка
//
Функция УбратьСлешВКонцеПути(Путь) Экспорт 

	Если Прав(Путь,1) = "\" Тогда
		Возврат Лев(Путь,СтрДлина(Путь)-1);
	Иначе
		Возврат Путь;
	КонецЕсли;

КонецФункции

//*****************************************************************
// Добавляет указанный каталог или файл в архив
// 
// Параметры:
//	Путь 
//		- Строка - Путь к файлу или каталог
//		- Массив - Массив строк с путями к файлу или каталогу
//	ИмяАрхива - Строка - Имя к файлу архива, куда будет добавлен файл или каталог. Если не задано, имя архива будет сгенерировано.
//	Пароль - Строка - Пароль, который будет назначен архиву. Если пароль не назначен или является пустой строкой, то шифрование не происходит. 
//	Комментарий - Строка - Комментарий, описывающий ZIP файл. 
//	МетодСжатия - МетодСжатияZIP - Метод сжатия, которым будет сжиматься архив. Значение по умолчанию: Сжатие. 
//	УровеньСжатия - УровеньСжатияZIP - Уровень сжатия данных. Значение по умолчанию: Максимальный. 
//	МетодШифрования - МетодШифрованияZIP - Метод шифрования, которым будет зашифрован архив. Значение по умолчанию: Zip20. 
//	МетодСохраненияПутей - РежимСохраненияПутейZIP - Метод сохранения путей к файлу в архиве. Значение по умолчанию: СохранятьОтносительныеПути. 
//	РекурсивнаяОбработкаПодпапок - РежимОбработкиПодкаталоговZIP - В случае добавления файлов по маске обрабатывать дополнительно подкаталоги. Значение по умолчанию: ОбрабатыватьРекурсивно. 
//
// Возвращает:
//	Истина - Ошибок не было
//	Ложь - Были ошибки
//
Функция ДобавитьВАрхив(Знач Путь, 
	ИмяАрхива="", Знач Пароль="", Знач Комментарий="", Знач МетодСжатия="", Знач УровеньСжатия="", Знач МетодШифрования="",
	Знач МетодСохраненияПутей = "", Знач РекурсивнаяОбработкаПодпапок = "") Экспорт

	Если ИмяАрхива = "" Тогда
		ИнформацияОФайле = ИнформацияОФайле(Путь);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяАрхива = ОбъединитьПути(
			ИнформацияОФайле.Каталог,
			ИмяФайлаНаДату(ИнформацияОФайле.ИмяБезРасширения,"zip"));
	КонецЕсли;
	
	Если МетодСжатия = "" Тогда
		// Сжатие по умолчанию
		МетодСжатия = МетодСжатияZIP.Сжатие;
	КонецЕсли;
	
	Если УровеньСжатия = "" Тогда
		// Размер архива важнее времени выполнения
		УровеньСжатия = УровеньСжатияZIP.Максимальный;
	КонецЕсли;
	
	Если МетодШифрования = "" Тогда
		// Метод шифрования по умолчанию
		МетодШифрования = МетодШифрованияZIP.Zip20;
	КонецЕсли;
	
	Если МетодСохраненияПутей = "" Тогда
		// Сохраняем структуру путей внутри каталога
		МетодСохраненияПутей = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	КонецЕсли;
	
	Если РекурсивнаяОбработкаПодпапок = "" Тогда
		// Собираем все вложенные каталоги
		РекурсивнаяОбработкаПодпапок = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	КонецЕсли;
	
	Попытка
		ЗаписьZip = Новый ЗаписьZipФайла;
		ЗаписьZip.Открыть(ИмяАрхива,Пароль,Комментарий,МетодСжатия,УровеньСжатия,МетодШифрования);
		Если ТипЗнч(Путь) = Тип("Строка") Тогда
			ЗаписьZip.Добавить(УбратьСлешВКонцеПути(Путь),МетодСохраненияПутей,РекурсивнаяОбработкаПодпапок);
		Иначе
			Для Каждого ТекПуть Из Путь Цикл
				ЗаписьZip.Добавить(УбратьСлешВКонцеПути(ТекПуть),МетодСохраненияПутей,РекурсивнаяОбработкаПодпапок);
			КонецЦикла;
		КонецЕсли;
		ЗаписьZip.Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Копирует файл в указанный каталог с указанным именем
//
// Параметры:
//	ПолноеИмяФайлаИсточника - Строка - Полное имя к файлу источнику
//	ИмяКаталогаПриемника - Строка - Имя каталога приемника, если не указан, то каталаг временных файлов
//	ИмяФайлаПриемника - Строка - Имя файла приемника, исли не указан, то совподает с файлом примником
//
// Возвращает:
//	ИмяСкопированногоФайла - Строка - Имя скопированного файла или Неопределено, если файл исходник не существует
//
Функция СкопироватьФайл(ПолноеИмяФайлаИсточника, Знач ИмяКаталогаПриемника="", ИмяФайлаПриемника="") Экспорт

	Файл = Новый Файл(ПолноеИмяФайлаИсточника);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = "Не найден файл по пути: " + ПолноеИмяФайлаИсточника;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяФайлаПриемника = "" Тогда
		ИмяФайлаПриемника = Файл.Имя;
	КонецЕсли;

	Если ИмяКаталогаПриемника = "" Тогда
		ИмяКаталогаПриемника = КаталогВременныхФайлов();
	КонецЕсли;

	ИмяСкопированногоФайла = ОбъединитьПути(ИмяКаталогаПриемника,ИмяФайлаПриемника);
	КопироватьФайл(ПолноеИмяФайлаИсточника,ИмяСкопированногоФайла);
	
	Возврат ИмяСкопированногоФайла;

КонецФункции

//*****************************************************************
// Проверяет наличие указанного каталога, если не найден, создает его
//
// Параметры:
//	Путь - Строка - Путь к каталогу
//
// Возвращает:
//	Истина - Ошибок не было
//	Ложь - Были ошибки
//  
Функция ОбеспечитьКаталог(Знач Путь) Экспорт
    
	// Создадим путь к каталогу приемнику
	Файл = Новый Файл(Путь);
    Если Не Файл.Существует() Тогда
       
	   СоздатьКаталог(Путь);
		
		// Проверим, что все получилось
		Файл = Новый Файл(Путь);
		Если Не файл.Существует() Тогда
			ТекстОшибки = " Не удалось создать каталог " + Путь;
			Возврат Ложь;
		КонецЕсли;
		
    ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ТекстОшибки = "Не удается создать каталог " + Путь + ". По данному пути уже существует файл.";
		Возврат Ложь;
    КонецЕсли;
	
	Возврат Истина;
    
КонецФункции 

//*****************************************************************
// Проверяет наличие указанного каталога, если не найден, создает его, затем каталог очищается
//
// Параметры:
//	Путь - Строка - Путь к каталогу
//
// Возвращает:
//	Истина - Ошибок не было
//	Ложь - Были ошибки
//  
Функция ОбеспечитьПустойКаталог(Знач Путь) Экспорт
    
	Если Не ОбеспечитьКаталог(Путь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УдалитьФайлы(Путь, ПолучитьМаскуВсеФайлы());
	
	Возврат Истина;
    
КонецФункции 

//*****************************************************************
// Копирует весь каталог целиком или все файлы из одного каталога в другой
//
// Параметры:
//   ПолноеИмяКаталогаИсточника - Строка - Полнео имя каталога источника
//   ПутьКаталогаПриемника - Строка - Путь к каталогу назначения
//	 СоздаватьКаталог - Булево - Если значение Истина - будет скопирован весь каталог целиком с содержимым, иначе только содержимое
//
// Возвращает:
//	Истина - Ошибок не было
//	Ложь - Были ошибки
//
Функция СкопироватьКаталог(Знач ПолноеИмяКаталогаИсточника, Знач ПутьКаталогаПриемника="", СоздаватьКаталог=Истина) Экспорт

	// Проверим сущестование каталога источника
	Файл = Новый Файл(ПолноеИмяКаталогаИсточника);
	Если Не Файл.Существует() Тогда
        ТекстОшибки = "Не удается найти каталог " + ПолноеИмяКаталогаИсточника;
		Возврат Ложь;
    ИначеЕсли Не Файл.ЭтоКаталог() Тогда
        ТекстОшибки = "Не удается найти каталог " + ПолноеИмяКаталогаИсточника + ". По данному пути существует только файл.";
		Возврат Ложь;
    КонецЕсли;
	
	// Имя нового каталога
	Если СоздаватьКаталог Тогда
		ПутьКаталогаПриемника = ОбъединитьПути(ПутьКаталогаПриемника,Файл.Имя);
	КонецЕсли;
	
	// Создадим каталог приемника
	Если Не ОбеспечитьКаталог(ПутьКаталогаПриемника) Тогда
		Возврат Ложь;
	КонецЕсли;

	// Копируем содержимаое
	Файлы = НайтиФайлы(ПолноеИмяКаталогаИсточника, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(ПутьКаталогаПриемника, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			Если Не СкопироватьКаталог(Файл.ПолноеИмя, ПутьКопирования, Ложь) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Копирует файл в указанный каталог с указанным именем
//
// Параметры:
//	МассивИменФайлов - Массив - 
//		МассивСтрок - Строка - Полное имя к файлу источнику
//	ИмяКаталогаПриемника - Строка - Имя каталога приемника, если не указан, то каталаг временных файлов
//	ПропускатьНесуществующие - Булево - Если значение ИСТИНА, то ошибки не будет, в случае когда файл не найден, В противном случае будет возвращена ошибка работы функции.
//
// Возвращает:
//	Истина - Ошибок не было
//	Ложь - Были ошибки
//
Функция СкопироватьФайлы(МассивИменФайлов, Знач ИмяКаталогаПриемника="", ПропускатьНесуществующие=Истина) Экспорт

	// Цикл по именем файлов
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
	
		Файл = Новый Файл(ИмяФайла);
		Если Не Файл.Существует() Тогда
			Если ПропускатьНесуществующие Тогда
				Продолжить;
			Иначе
				ТекстОшибки = "Не найден файл по пути: " + ИмяФайла;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Файл.ЭтоКаталог() Тогда
			Если СкопироватьКаталог(ИмяФайла,ИмяКаталогаПриемника,Истина) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Файл.ЭтоФайл() Тогда
			Если СкопироватьФайл(ИмяФайла,ИмяКаталогаПриемника) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

