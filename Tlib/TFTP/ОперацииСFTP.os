//*****************************************************************
// Библиотека: TFTP
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 11.05.2017
//
// !!!ВНИМАНИЕ!!!
//	* В зависимости от настроек FTP-сервера, может некорректно отрабатывать с кирилическими путями!
//  * В зависимости от настроек FTP-сервера, может не правильно определять дату загрузки файла!
//  * В зависимости от настроек FTP-сервера, не всегда корректно выполняется проверка выполнения операций (параметр "ПроверятьРезультат")
//  * Протестировано на:
//		- Microsoft FTP Service
//		- ProFTPD 1.3.4a Server (Debian) 
//	* Если хотите протестировать / оптимизировать библиотеку для вашего FTP-сервера, пишите на tavalik @ mail.ru
//

//*****************************************************************
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ
// Структура параметров подключения к FTP-серверу, описание в процедуре ИнициироватьПараметры()
Перем ПараметрыFTP Экспорт;
// Имя файла в который будет записываться лог
Перем ТекстОшибки Экспорт;


//*****************************************************************
// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
// Создает структуру учетной записи электронной почты и структуру сообщения
//
//  УчетнаяЗаписьFTP         - Структура - структура учетной записи FTP-сервера для подключения
//    * Адрес                           - Строка - Адрес FTP-сервера
//    * Порт                            - Строка - Порт FTP-сервера
//    * ИмяПользователя                 - Строка - Имя пользвоателя FTP-сервера
//    * ПарольПользователя              - Строка - Пароль пользвователя FTP-сервера
//	  * ПроверятьРезультат 				- Булево - Если значение Истина, то будет осуществляться проверка каждой операции
// 										Проверка осуществляется по имени и по размеру файлов. 
// 										Несмотря на то, что операция может быть выполнена корректно, проверка может не пройти. 
//										Это связанно с разыми настройками локального компьютера и FTP-сервера
// 										(Разные операционные системы, формыт дат, проблемы с кирилическими названиями и т. д.)
Процедура ИнициироватьПараметры()

	// УЧЕТНАЯ ЗАПИСЬ ЭЛЕКТРОННОЙ ПОЧТЫ ДЛЯ ОТПРАВКИ
	ПараметрыFTP = Новый Структура;	
	// Адрес FTP-сервера
	ПараметрыFTP.Вставить("Адрес","");
	// Порт FTP-сервера
	ПараметрыFTP.Вставить("Порт","");
	// Имя пользователя FTP-сервера
	ПараметрыFTP.Вставить("ИмяПользователя","");
	// Пароль пользователя FTP-сервера
	ПараметрыFTP.Вставить("ПарольПользователя","");
	// Проверка результата после работы каждой операции.
	// Проверка осуществляется по имени и по размеру файлов. 
	// Несмотря на то, что операция может быть выполнена корректно, проверка может не пройти. Это связанно с разыми настройками локального компьютера и FTP-сервера
	// (Разные операционные системы, формыт дат, проблемы с кирилическими названиями и т. д.)
	ПараметрыFTP.Вставить("ПроверятьРезультат",Ложь);
	
	// ТЕКСТ ОШИБКИ
	ТекстОшибки = "";
	
КонецПроцедуры

//*****************************************************************
// Функция пытается преоборазовать строку в дату, если не получается возвращается текущая дата
// !!!ВНИМАНИЕ!!! Зависит от настроек FTP-сервера. Смотрите поддерживаемые форматы.
//
// Поддерживаемые форматы:
//  "19840326062421"
//  "05-01-17 03:40PM"
//	"Sep 25  2013"
//	"May  1 13:05"
//
Функция ПреобразоватьВДату(Знач ТекСтрока)

	ТекСтрока = СокрЛП(ТекСтрока);
	// Если дату вычислить не удасться, то вернем текущую дату.
	// Сделано это для того, чтобы при удалении файлов по дате, не затереть свежие файлы.
	ТекДата = ТекущаяДата();

	//Стандартное преобразование
	Попытка
		ТекДата = Дата(ТекСтрока);
		Возврат ТекДата;
	Исключение
	КонецПопытки;
	
	//Преобразование из формата вида "05-01-17 03:40PM"
	Попытка
		Если СтрДлина(ТекСтрока) = 16
			И Сред(ТекСтрока,3,1) = "-"
			И Сред(ТекСтрока,6,1) = "-"
			И Сред(ТекСтрока,12,1) = ":" Тогда
			
			Если Прав(ТекСтрока,2) = "AM" Тогда
				Час = Число(Сред(ТекСтрока,10,2));
			ИначеЕсли Прав(ТекСтрока,2) = "PM" Тогда
				Час = Число(Сред(ТекСтрока,10,2)) + 12;
			Иначе
				Час = -1;
			КонецЕсли;
	
			Если Час <> -1 Тогда
				ТекДата = Дата(
					Число(Сред(ТекСтрока,7,2))+2000,
					Число(Сред(ТекСтрока,1,2)),
					Число(Сред(ТекСтрока,4,2)),
					Час,
					Число(Сред(ТекСтрока,13,2)),
					0);				
				Возврат ТекДата;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Преобразование из формата вида "May 1 13:05" или "May 15 13:05"
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить("Jan");
	МассивМесяцев.Добавить("Feb");
	МассивМесяцев.Добавить("Mar");
	МассивМесяцев.Добавить("Apr");
	МассивМесяцев.Добавить("May");
	МассивМесяцев.Добавить("Jun");
	МассивМесяцев.Добавить("Jul");
	МассивМесяцев.Добавить("Aug");
	МассивМесяцев.Добавить("Sep");
	МассивМесяцев.Добавить("Oct");
	МассивМесяцев.Добавить("Nov");
	МассивМесяцев.Добавить("Dec");
	НомерМесяца = МассивМесяцев.Найти(Лев(ТекСтрока,3));
	Попытка
		Если СтрДлина(ТекСтрока) = 11 Тогда
			Сдвиг = 0;
		ИначеЕсли СтрДлина(ТекСтрока) = 12 Тогда
			Сдвиг = 1;
		Иначе
			Сдвиг = -1;
		КонецЕсли;
		
		Если Сдвиг <> -1 
			И НомерМесяца <> Неопределено
			И Сред(ТекСтрока,9+Сдвиг,1) = ":" Тогда
			
			ТекДата = Дата(
				Год(ТекущаяДата()),
				НомерМесяца+1,
				Число(Сред(ТекСтрока,5,1+Сдвиг)),
				Число(Сред(ТекСтрока,7+Сдвиг,2)),
				Число(Сред(ТекСтрока,10+Сдвиг,2)),
				0);	
			
			Возврат ТекДата;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Преобразование из формата вида "Sep 1 2013" или "Sep 15 2013"
	Попытка
		Если СтрДлина(ТекСтрока) = 10 Тогда
			Сдвиг = 0;
		ИначеЕсли СтрДлина(ТекСтрока) = 11 Тогда
			Сдвиг = 1;
		Иначе
			Сдвиг = -1;
		КонецЕсли;
		
		Если Сдвиг <> -1 
			И НомерМесяца <> Неопределено Тогда
			
			ТекДата = Дата(
				Число(Сред(ТекСтрока,7+Сдвиг,4)),
				НомерМесяца+1,
				Число(Сред(ТекСтрока,5,1+Сдвиг)),
				0,
				0,
				0);	
			
			Возврат ТекДата;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Возврат ТекДата; 

КонецФункции


//*****************************************************************
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
// Проверить доступность FTP-сервера. Доступность осуществляется с помощью загрузки и скачивания файла. Затем сравниваются размеры файлов.
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция ПроверитьДоступностьFTP(Знач КаталогНаFTP="") Экспорт

	//Создадим файл
	ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ПолныйПутьКФайлу);
	Для Сч = 1 По 100 Цикл
		ЗаписьТекста.ЗаписатьСтроку("Test string: " + Сч);
	КонецЦикла;
	ЗаписьТекста.Закрыть();
	Файл = Новый Файл(ПолныйПутьКФайлу);
	ИмяФайлаНаFTP = Файл.Имя + "_on_ftp" + Файл.Расширение;

	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("cd " + КаталогНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("lcd " + ?(Прав(Файл.Путь,1) = "\",Лев(Файл.Путь,СтрДлина(Файл.Путь)-1),Файл.Путь));
	ЗаписьТекста.ЗаписатьСтроку("put " + Файл.Имя + " " + ИмяФайлаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("get " + ИмяФайлаНаFTP + " " + ИмяФайлаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("delete " + ИмяФайлаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка проверки доступности FTP-сервера: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка проверки доступности FTP-сервера: код ошибки - " + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим результат
	ФайлСФТП = Новый Файл(ОбъединитьПути(Файл.Путь,ИмяФайлаНаFTP));
	Если НЕ ФайлСФТП.Существует() Тогда
		ТекстОшибки = "Ошибка проверки доступности FTP-сервера: не удалось скачать или загрузить файл.";
		Возврат Ложь;
	КонецЕсли;
	
	//Сравним размеры файлов
	Если ФайлСФТП.Размер() <> Файл.Размер() Тогда
		ТекстОшибки = "Ошибка проверки доступности FTP-сервера: файлы разных размеров.";
		Возврат Ложь;
	КонецЕсли;
	
	УдалитьФайлы(ПолныйПутьКФайлу);
	УдалитьФайлы(ОбъединитьПути(Файл.Путь,ИмяФайлаНаFTP));

	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Получение списка файлов на FTP-сервере в указанном каталоге
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//	ИмяФайлаНаFTP - Строка - Имя файла на FTP-сервере. Если не указан - все файлы в каталоге.
//
// Возващает:
//	Таблица значений, с данными о каждом попавшем в выборку файле.
//	Колонки таблицы:
//		Имя - Имя файла
//		Размер - Размер файла в байтах
//		ДатаЗагрузки - Дата загрузки файла на FTP-сервер
//	
Функция ПолучитьСписокФайловНаFTP(Знач КаталогНаFTP="", ИмяФайлаНаFTP="") Экспорт

	//Проверим доступность FTP-сервера
	Если НЕ ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка получения списка файлов на FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Неопределено;
	КонецЕсли;

	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Имя файла вывода
	ИмяФайлаВывода = ПолучитьИмяВременногоФайла("txt");

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("dir " + КаталогНаFTP + " " + ИмяФайлаВывода);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка получения списка файлов на FTP: " + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка получения списка файлов на FTP: код ошибки - " + КодВозврата;
		Возврат Неопределено;
	КонецЕсли;
	
	//Проверим существование файла вывода
	Файл = Новый Файл(ИмяФайлаВывода);
	Если НЕ Файл.Существует() Тогда
		ТекстОшибки = "Ошибка получения списка файлов на FTP: не найден файл вывода.";
		Возврат Неопределено;
	КонецЕсли;
	
	//Если список файлов получин, прочитаем его и создадим таблицу
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Имя");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	ТаблицаФайлов.Колонки.Добавить("ДатаЗагрузки");
	ТаблицаФайлов.Колонки.Добавить("ЭтоКаталог");
	
	//Чтение файла вывода
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаВывода);
	ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	Пока ТекСтрока <> Неопределено Цикл

		флПроизошлаОшибка = Ложь;
		МассивПараметров = СтрРазделить(ТекСтрока," ");
	
		Попытка
			Если МассивПараметров.Количество() = 4 Тогда		
				//Фильтр по файлу, если указан
				Если ПустаяСтрока(ИмяФайлаНаFTP) ИЛИ СтрСравнить(ИмяФайлаНаFTP,МассивПараметров.Получить(3)) = 0 Тогда				
					НоваяСтрокаТаблицы = ТаблицаФайлов.Добавить();
					НоваяСтрокаТаблицы.ДатаЗагрузки = ПреобразоватьВДату(МассивПараметров.Получить(0) + " " + МассивПараметров.Получить(1));
					Если СокрЛП(МассивПараметров.Получить(2)) = "<DIR>" Тогда
						НоваяСтрокаТаблицы.ЭтоКаталог = Истина;
						НоваяСтрокаТаблицы.Размер = 0;
					Иначе
						НоваяСтрокаТаблицы.ЭтоКаталог = Ложь;
						НоваяСтрокаТаблицы.Размер = Число(СокрЛП(МассивПараметров.Получить(2)));
					КонецЕсли;	
					НоваяСтрокаТаблицы.Имя = СокрЛП(МассивПараметров.Получить(3));
				КонецЕсли;
			ИначеЕсли МассивПараметров.Количество() = 9 Тогда		
				//Фильтр по файлу, если указан
				Если ПустаяСтрока(ИмяФайлаНаFTP) ИЛИ СтрСравнить(ИмяФайлаНаFTP,МассивПараметров.Получить(8)) = 0 Тогда				
					НоваяСтрокаТаблицы = ТаблицаФайлов.Добавить();
					НоваяСтрокаТаблицы.ДатаЗагрузки = ПреобразоватьВДату(МассивПараметров.Получить(5) + " " + МассивПараметров.Получить(6) + " " + МассивПараметров.Получить(7));
					НоваяСтрокаТаблицы.Размер = Число(СокрЛП(МассивПараметров.Получить(4)));
					НоваяСтрокаТаблицы.Имя = СокрЛП(МассивПараметров.Получить(8));
					Если Число(СокрЛП(МассивПараметров.Получить(1))) = 2 Тогда
						НоваяСтрокаТаблицы.ЭтоКаталог = Истина;
					Иначе
						НоваяСтрокаТаблицы.ЭтоКаталог = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				флПроизошлаОшибка = Истина;
			КонецЕсли
		Исключение
			флПроизошлаОшибка = Истина;
		КонецПопытки;
		
		Если флПроизошлаОшибка Тогда
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяФайлаВывода);
			ТекстОшибки = "Ошибка получения списка файлов на FTP: неподдерживаемый формат файла вывода.";
			Возврат Неопределено;			
		КонецЕсли;
		
		ТекСтрока = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяФайлаВывода);
	
	Возврат ТаблицаФайлов;

КонецФункции

//*****************************************************************
// Удаляет указанный файл с FTP-сервера
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//	ИмяФайлаНаFTP - Строка - Имя файла на FTP-сервере
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция УдалитьФайлНаFTP(Знач КаталогНаFTP="", ИмяФайлаНаFTP) Экспорт

	//Проверим доступность FTP-сервера
	Если НЕ ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка удаления файла на FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Ложь;
	КонецЕсли;

	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("cd " + КаталогНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("delete " + ИмяФайлаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка удаления файла на FTP: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка удаления файла на FTP: код ошибки - " + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим результат
	Если ПараметрыFTP.ПроверятьРезультат Тогда
	
		//Получим список файлов на ftp
		СписокФайлов = ПолучитьСписокФайловНаFTP(КаталогНаFTP,ИмяФайлаНаFTP);
		Если СписокФайлов = Неопределено Тогда
			//Ошибка получения списка файлов на ftp
			//ТекстОшибки уже имеется
			Возврат Ложь;
		КонецЕсли;

		//Проверим, что файл найден
		Если СписокФайлов.Количество() <> 0 Тогда
			ТекстОшибки = "Ошибка удаления файла на FTP: файл " + ИмяФайлаНаFTP + " не найден на сервере после удаления";
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;	
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Удаляет все файлы в выбранном каталоге с FTP-сервера, если они загружены раннее указанной даты
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//  ДатаДляПроверки - Дата - Дата для проверки загрузки файла
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция УдалитьФайлыНаFTPЗагруженныеРаннееДаты(Знач КаталогНаFTP="", ДатаДляПроверки) Экспорт

	//Проверим доступность FTP-сервера
	Если НЕ ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка удаления файла на FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Ложь;
	КонецЕсли;

	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Получим список файлов на ftp
	СписокФайлов = ПолучитьСписокФайловНаFTP(КаталогНаFTP);
	Если СписокФайлов = Неопределено Тогда
		//Ошибка получения списка файлов на ftp
		//ТекстОшибки уже имеется
		Возврат Ложь;
	КонецЕсли;

	//Файлы собраны, удаляем, если необходимо
	Для Каждого Файл Из СписокФайлов Цикл
		Если Файл.ДатаЗагрузки < ДатаДляПроверки Тогда
			Если НЕ УдалитьФайлНаFTP(КаталогНаFTP, Файл.Имя) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

//*****************************************************************
// Удаляет все файлы в выбранном каталоге с FTP-сервера, если они загружены более указанного количества дней назад
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//  КоличествоДнейДляПроверки - Число - Количество дней для проверки загрузки файла
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция УдалитьФайлыНаFTPЗагруженныеБолееДнейНазад(Знач КаталогНаFTP="", КоличествоДнейДляПроверки) Экспорт

	ДатаДляПроверки = ТекущаяДата() - КоличествоДнейДляПроверки * 24 * 60 * 60;
	Возврат УдалитьФайлыНаFTPЗагруженныеРаннееДаты(КаталогНаFTP, ДатаДляПроверки);

КонецФункции

//*****************************************************************
// Загружает указанный файл на FTP-сервер
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//  ПолныйПутьКФайлу - Строка - Полный путь к загружаемому файлу
//	ИмяФайлаНаFTP - Строка - Имя файла на FTP-сервере
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция ЗагрузитьФайлНаFTP(Знач КаталогНаFTP="", ПолныйПутьКФайлу, Знач ИмяФайлаНаFTP="") Экспорт

	//Проверим существование файла
	Файл = Новый Файл(ПолныйПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = "Ошибка загрузки файла на FTP: не найден файл по пути: " + ПолныйПутьКФайлу;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим доступность FTP-сервера
	Если Не ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка загрузки файла на FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Ложь;
	КонецЕсли;
	
	//Имя файла на ftp
	Если СтрДлина(ИмяФайлаНаFTP) = 0 Тогда
		ИмяФайлаНаFTP = Файл.Имя;
	КонецЕсли;
	
	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("cd " + КаталогНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("lcd " + ?(Прав(Файл.Путь,1) = "\",Лев(Файл.Путь,СтрДлина(Файл.Путь)-1),Файл.Путь));
	ЗаписьТекста.ЗаписатьСтроку("put " + Файл.Имя + " " + ИмяФайлаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка загрузки файла на FTP: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка загрузки файла на FTP: код ошибки - " + КодВозврата;
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверим результат
	Если ПараметрыFTP.ПроверятьРезультат Тогда
	
		//Получим список файлов на ftp
		СписокФайлов = ПолучитьСписокФайловНаFTP(КаталогНаFTP,ИмяФайлаНаFTP);
		Если СписокФайлов = Неопределено Тогда
			//Ошибка получения списка файлов на ftp
			//ТекстОшибки уже имеется
			Возврат Ложь;
		КонецЕсли;

		//Проверим, что файл найден
		Если СписокФайлов.Количество() = 0 Тогда
			ТекстОшибки = "Ошибка загрузки файла на FTP: файл не найден после загрузки";
			Возврат Ложь;
		КонецЕсли;

		//Проверим, что размер файлов совпадает
		Если СписокФайлов.Получить(0).Размер <> Файл.Размер() Тогда
			УдалитьФайлНаFTP(КаталогНаFTP,ИмяФайлаНаFTP);
			ТекстОшибки = "Ошибка загрузки файла на FTP: размеры файлов не совпадают. " + ТекстОшибки;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Скачивает файл с FTP-сервера
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//	ИмяФайлаНаFTP - Строка - Имя файла на FTP-сервере
//	Каталог - Строка - Каталог на локальном компьютере, в который будет сохранен файл
//	ИмяФайла - Строка - Имя файла на локальном компьютере
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция СкачатьФайлСFTP(Знач КаталогНаFTP="", ИмяФайлаНаFTP, Каталог, Знач ИмяФайла="") Экспорт

	//Проверим доступность FTP-сервера
	Если НЕ ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка сохранения файла с FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Ложь;
	КонецЕсли;

	//Имя файла на ftp
	Если СтрДлина(ИмяФайла) = 0 Тогда
		ИмяФайла = ИмяФайлаНаFTP;
	КонецЕсли;
	
	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Получим список файлов на ftp
	СписокФайлов = ПолучитьСписокФайловНаFTP(КаталогНаFTP,ИмяФайлаНаFTP);
	Если СписокФайлов = Неопределено Тогда
		//Ошибка получения списка файлов на ftp
		//ТекстОшибки уже имеется
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим, что файл найден
	Если СписокФайлов.Количество() = 0 Тогда
		ТекстОшибки = "Ошибка сохранения файла с FTP: файл не найден на FTP-сервере.";
		Возврат Ложь;
	КонецЕсли;	

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("cd " + КаталогНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("lcd " + ?(Прав(Каталог,1) = "\",Лев(Каталог,СтрДлина(Каталог)-1),Каталог));
	ЗаписьТекста.ЗаписатьСтроку("get " + ИмяФайлаНаFTP + " " + ИмяФайла);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка сохранения файла с FTP: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка сохранения файла с FTP: код ошибки - " + КодВозврата;
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим результат
	Если ПараметрыFTP.ПроверятьРезультат Тогда
	
		//Проверим существование файла
		Файл = Новый Файл(ОбъединитьПути(Каталог,ИмяФайла));
		Если Не Файл.Существует() Тогда
			ТекстОшибки = "Ошибка сохранения файла с FTP: не найден файл по пути: " + Файл.ПолноеИмя;
			Возврат Ложь;
		КонецЕсли;	

		//Проверим, что размер файлов совпадает
		Если СписокФайлов.Получить(0).Размер <> Файл.Размер() Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
			ТекстОшибки = "Ошибка загрузки файла на FTP: размеры файлов не совпадают. ";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Создать каталог на FTP-сервере
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//	ИмяНовогоКаталогаНаFTP - Строка - Имя создаваемого каталога на FTP-сервере
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция СоздатьКаталогНаFTP(Знач КаталогНаFTP="", ИмяНовогоКаталогаНаFTP) Экспорт

	//Проверим доступность FTP-сервера
	Если НЕ ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка создания каталога на FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Ложь;
	КонецЕсли;

	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("cd " + КаталогНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("mkdir " + ИмяНовогоКаталогаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка создания каталога на FTP: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка создания каталога на FTP: код ошибки - " + КодВозврата;
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверим результат
	Если ПараметрыFTP.ПроверятьРезультат Тогда
	
		//Получим список файлов на ftp
		СписокФайлов = ПолучитьСписокФайловНаFTP(КаталогНаFTP,ИмяНовогоКаталогаНаFTP);
		Если СписокФайлов = Неопределено Тогда
			//Ошибка получения списка файлов на ftp
			//ТекстОшибки уже имеется
			Возврат Ложь;
		КонецЕсли;

		//Проверим, что каталог найден
		Если СписокФайлов.Количество() = 0 Тогда
			ТекстОшибки = "Ошибка создания каталога на FTP: каталог не найден после создания";
			Возврат Ложь;
		КонецЕсли;
		
		//Проверим, что это каталог
		Если НЕ СписокФайлов.Получить(0).ЭтоКаталог Тогда
			ТекстОшибки = "Ошибка создания каталога на FTP: существет файл с именем " + ИмяНовогоКаталогаНаFTP;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

//*****************************************************************
// Удалить каталог на FTP-сервере
//
// Параметры:
//	КаталогНаFTP - Строка - Адрес каталога на FTP-сервере
//	ИмяУдаляемогоКаталогаНаFTP - Строка - Имя удаляемого каталога на FTP-сервере
//
// Возващает:
//	Булево
//		Истина - Успешное завершение работы
//		Ложь - Были ошибки
//
Функция УдалитьКаталогНаFTP(Знач КаталогНаFTP="", ИмяУдаляемогоКаталогаНаFTP) Экспорт

	//Проверим доступность FTP-сервера
	Если НЕ ПроверитьДоступностьFTP(КаталогНаFTP) Тогда
		ТекстОшибки = "Ошибка удаления каталога на FTP: не удалось проверить доступность FTP-сервера!";
		Возврат Ложь;
	КонецЕсли;

	//Имя каталога на ftp
	Если КаталогНаFTP = "" Тогда
		КаталогНаFTP = "/"
	Иначе
		КаталогНаFTP = СтрЗаменить(КаталогНаFTP,"\","/");
	КонецЕсли;

	//Создадим файл траспорта
	ИмяФайлаТраспорта = ПолучитьИмяВременногоФайла("txt");	 
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ИмяФайлаТраспорта,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("open " + ПараметрыFTP.Адрес + ?(ЗначениеЗаполнено(ПараметрыFTP.Порт),":" + ПараметрыFTP.Порт,""));
	ЗаписьТекста.ЗаписатьСтроку("user " + ПараметрыFTP.ИмяПользователя + " " + ПараметрыFTP.ПарольПользователя);
	ЗаписьТекста.ЗаписатьСтроку("cd " + КаталогНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("rmdir " + ИмяУдаляемогоКаталогаНаFTP);
	ЗаписьТекста.ЗаписатьСтроку("bye ");
	ЗаписьТекста.Закрыть();

	//Выполняем команду ftp
	КодВозврата = 0;
	Попытка
		ЗапуститьПриложение("ftp -v -n -s:" + ИмяФайлаТраспорта,,Истина,КодВозврата);
		УдалитьФайлы(ИмяФайлаТраспорта);
	Исключение
		УдалитьФайлы(ИмяФайлаТраспорта);
		ТекстОшибки = "Ошибка удаления каталога на FTP: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	//Проверим код возврата
	Если КодВозврата <> 0 Тогда
		ТекстОшибки = "Ошибка удаления каталога на FTP: код ошибки - " + КодВозврата;
		Возврат Ложь;
	КонецЕсли;	
	
	//Проверим результат
	Если ПараметрыFTP.ПроверятьРезультат Тогда
	
		//Получим список файлов на ftp
		СписокФайлов = ПолучитьСписокФайловНаFTP(КаталогНаFTP,ИмяУдаляемогоКаталогаНаFTP);
		Если СписокФайлов = Неопределено Тогда
			//Ошибка получения списка файлов на ftp
			//ТекстОшибки уже имеется
			Возврат Ложь;
		КонецЕсли;

		//Проверим, что каталог найден
		Если СписокФайлов.Количество() <> 0
			И СписокФайлов.Получить(0).ЭтоКаталог Тогда
			ТекстОшибки = "Ошибка удаления каталога на FTP: каталог найден после создания";
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции


//*****************************************************************
// Сразу при создании инициируем параметры
ИнициироватьПараметры();













