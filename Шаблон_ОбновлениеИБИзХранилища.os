//*****************************************************************
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 18.05.2017
// Описание:
//	Скрипт выполняет обновление конфигурации указанных серверных информационных баз из хранилища, алгоритм работы следующий:
//		1. Для каждой инфорамционной базы 
//			1.1 Устанавливается блокировка начала сеансов и РЗ
//			1.2 Ожидается, пока пользователи завершат свои сеансы (указанное количество минут)
//			1.3 Жестко завершается работа всех пользователей
//			1.4 Обновляется конфигурация из хранилища
//			1.5 Обновляется конфигурация базы данных
//			1.6 Снимается блокировка начала сеансов и РЗ
//		3. Отправляется электорнное сообщение о результатах выполнения задания (опционально) 
// Аргументы командной строки:
//	Нет. Все параметры задаются в теле модуля.


//***************************************************************
// ПОДКЛЮЧАЕМЫЕ БИБЛИОТЕКИ

// Логирование
#Использовать "TLog"
// Запуск 1С
#Использовать "TRun1C"
// Файловые операции
#Использовать "TFile"
// Электронная почта 
#Использовать "TMail" 


//***************************************************************
// АРГУМЕНТЫ КОМАНДНОЙ СТРОКИ

// Нет

//***************************************************************
// НАСТРАИВАЕМЫЕ ПАРАМЕТРЫ

// Таблица с указанием источников копирования
Запуск1С = Новый ТУправлениеЗапуском1С(); //TRun1C
ПараметрыЗапуска = Запуск1С.ПараметрыЗапуска;
ПараметрыЗапускаПоУмолчанию = Новый Структура;
ДанныеДляОбновления = Новый ТаблицаЗначений;
Для Каждого Параметр Из ПараметрыЗапуска Цикл
	ДанныеДляОбновления.Колонки.Добавить(Параметр.Ключ);
	ПараметрыЗапускаПоУмолчанию.Вставить(Параметр.Ключ,Параметр.Значение);
КонецЦикла;

// Параметры информационных баз по умолчанию 
// Используются, если не указаны параметры конкретной базы
// Описание структуры параметров в библиотеке "TRun1C"
ПараметрыЗапускаПоУмолчанию.ПутьКПлатформе1С = "C:\Program Files (x86)\1cv8\8.3.8.2054\bin\1cv8.exe";
ПараметрыЗапускаПоУмолчанию.ТипБазы = "S";
ПараметрыЗапускаПоУмолчанию.АдресКластера = "10.1.1.40";
ПараметрыЗапускаПоУмолчанию.ПортКластера = "2541";
ПараметрыЗапускаПоУмолчанию.ПортАгента = "2540";
ПараметрыЗапускаПоУмолчанию.АдресХранилища = "C:\Temp\Repository\";
МинутОжиданияЗавершенияСеансов = 3;

// Список баз для обновления
// Описание структуры параметров в библиотеке "TRun1C"
НоваяСтрокаОбновления = ДанныеДляОбновления.Добавить(); //1 
НоваяСтрокаОбновления.ИмяБазы = "TestBase";
НоваяСтрокаОбновления.ИмяПользователя = "Администратор";
НоваяСтрокаОбновления.ПарольПользователя = "";
НоваяСтрокаОбновления.ИмяПользователяХранилища = "admin";
НоваяСтрокаОбновления.ПарольПользователяХранилища = "";

// Каталог для хранения логов
ИдентификаторЗадания = "ОбновлениеИБИзХранилища";
КаталогХраненияЛогов = ".\_Logs\";
ХранитьЛогиДней = 365;
Логирование = Новый ТУправлениеЛогированием(); //TLog
Логирование.ДатаВремяВКаждойСтроке = Истина;
Логирование.СоздатьФайлЛога(ИдентификаторЗадания,КаталогХраненияЛогов);

// Инициируем параметры для отправки сообщения
УправлениеЭП = Новый ТУправлениеЭлектроннойПочтой(); //TMail
УчетнаяЗаписьЭП = УправлениеЭП.УчетнаяЗаписьЭП;
УчетнаяЗаписьЭП.АдресSMTP = "smtp.mydomen.com"; // Если не указан, не отправляется сообщение
УчетнаяЗаписьЭП.ПортSMTP = 465;  
УчетнаяЗаписьЭП.ПользовательSMTP = "report@mydomen.com";
УчетнаяЗаписьЭП.ПарольSMTP = "pass_mail";
УчетнаяЗаписьЭП.ИспользоватьSSL = Истина;
СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
СтруктураСообщения.АдресЭлектроннойПочтыПолучателя = "admin@mydomen.com;";

//Темы сообщений
СИ = Новый СистемнаяИнформация();
ТемаСообщенияПриОшибке = "ВНИМАНИЕ! Задание """ + ИдентификаторЗадания + """ на сервере " + СИ.ИмяКомпьютера + " завершено с ошибками";
ТемаСообщенияПриУспехе = "Успешное выполнение задания """ + ИдентификаторЗадания + """ на сервере " + СИ.ИмяКомпьютера;

// Файловые операции
ФайловыеОперации = Новый ТУправлениеФайловымиОперациями(); //TFile

//***************************************************************
// ТЕЛО СКРИПТА

// Сделаем записть о начале выполнения задания
Логирование.ЗаписатьСтрокуЛога(Строка(ТекущаяДата()) + ": Начало выполнения задания """ + ИдентификаторЗадания + """");
Логирование.УвеличитьУровень();

// Служебные переменные
БылиОшибки = Ложь;

// Цикл по базам для обновления
Для Каждого СтрокаОбновления Из ДанныеДляОбновления Цикл

	БылиОшибкиТекБД = Ложь;
	Логирование.ЗаписатьСтрокуЛога();
	Логирование.ЗаписатьСтрокуЛога("Попытка обновления информационной базы: " + СтрокаОбновления.ИмяБазы);
	Логирование.УвеличитьУровень();

	// Параметры базы
	Для Каждого Параметр Из ПараметрыЗапуска Цикл
		Если ЗначениеЗаполнено(СтрокаОбновления[Параметр.Ключ]) Тогда
			ПараметрыЗапуска.Вставить(Параметр.Ключ,СтрокаОбновления[Параметр.Ключ]);
		Иначе
			ПараметрыЗапуска.Вставить(Параметр.Ключ,ПараметрыЗапускаПоУмолчанию[Параметр.Ключ]);
		КонецЕсли;
	КонецЦикла;

	// Устанавливаем блокировку начала сеансов и РЗ
	Если Запуск1С.УстановитьБлокировкуНачалаСеансов() Тогда
		Логирование.ЗаписатьСтрокуЛога("Установить блокировку начала сеансов: УСПЕШНО!");
	Иначе
		Логирование.ЗаписатьСтрокуЛога("Установить блокировку начала сеансов: ОШИБКА! Причина: " + Запуск1С.ТекстОшибки);
		БылиОшибкиТекБД = Истина;
	КонецЕсли;
	
	//Подождем несколько минут
	Если Не БылиОшибкиТекБД Тогда
		Приостановить(МинутОжиданияЗавершенияСеансов * 60000);
	КонецЕсли;
	
	// Завершим работу пользователей
	Если Не БылиОшибкиТекБД И Запуск1С.ЗавершитьРаботуПользователей() Тогда
		Логирование.ЗаписатьСтрокуЛога("Завершить работу пользователей: УСПЕШНО!");
	Иначе
		Логирование.ЗаписатьСтрокуЛога("Завершить работу пользователей: ОШИБКА! Причина: " + Запуск1С.ТекстОшибки);
		БылиОшибкиТекБД = Истина;
	КонецЕсли;
	
	// Обновим конфигурацию из хранилища
	Если Не БылиОшибкиТекБД И Запуск1С.ОбновитьКонфигурациюИзХранилища() Тогда
		Логирование.ЗаписатьСтрокуЛога("Обновить конфигурацию из хранилища: УСПЕШНО!");
	Иначе
		Логирование.ЗаписатьСтрокуЛога("Обновить конфигурацию из хранилища: ОШИБКА! Причина: " + Запуск1С.ТекстОшибки);
		БылиОшибкиТекБД = Истина;
	КонецЕсли;
	
	// Обновим конфигурацию базы данных
	Если Не БылиОшибкиТекБД И Запуск1С.ОбновитьКонфигурациюБазыДанных() Тогда
		Логирование.ЗаписатьСтрокуЛога("Обновить конфигурацию базы данных: УСПЕШНО!");
	Иначе
		Логирование.ЗаписатьСтрокуЛога("Обновить конфигурацию базы данных: ОШИБКА! Причина: " + Запуск1С.ТекстОшибки);
		БылиОшибкиТекБД = Истина;
	КонецЕсли;
	
	// Снимем блокировку начала сеансов
	Если Запуск1С.СнятьБлокировкуНачалаСеансов() Тогда
		Логирование.ЗаписатьСтрокуЛога("Снять блокировку начала сеансов: УСПЕШНО!");
	Иначе
		Логирование.ЗаписатьСтрокуЛога("Снять блокировку начала сеансов: ОШИБКА! Причина: " + Запуск1С.ТекстОшибки);
		БылиОшибкиТекБД = Истина;
	КонецЕсли;
	
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Обновление информационной базы " + СтрокаОбновления.ИмяБазы + " выполнено " + ?(БылиОшибкиТекБД,"С ОШИБКАМИ!","УСПЕШНО!"));
	БылиОшибки = БылиОшибки ИЛИ БылиОшибкиТекБД;
	
КонецЦикла;

// Сделаем записть о завершении выполнения основного задания
Логирование.ЗаписатьСтрокуЛога();
Логирование.ЗаписатьСтрокуЛога("Результат выполнения задания: " + ?(БылиОшибки,"БЫЛИ ОШИБКИ","УСПЕШНОЕ ВЫПОЛНЕНИЕ"));
Логирование.ЗаписатьСтрокуЛога();
Логирование.УменьшитьУровень();
Логирование.ЗаписатьСтрокуЛога(Строка(ТекущаяДата()) + ": Завершение выполнения задания """ + ИдентификаторЗадания + """", -1);

// Отправляем эклектронное сообщение с файлом лога во вложении
Если ЗначениеЗаполнено(УчетнаяЗаписьЭП.АдресSMTP) Тогда

	Если БылиОшибки Тогда
		СтруктураСообщения.ТемаСообщения = ТемаСообщенияПриОшибке;
	Иначе
		СтруктураСообщения.ТемаСообщения = ТемаСообщенияПриУспехе;
	КонецЕсли;	
	СтруктураСообщения.ТекстСообщения = СтруктураСообщения.ТемаСообщения;
	
	//Часть имеющегося лога добавим в письмо
	ИмяВременногоФайла = ФайловыеОперации.СкопироватьФайл(Логирование.ИмяФайлаЛога);
	СтруктураСообщения.Вложения = ИмяВременногоФайла;
	
	//Отправим сообщение
	Логирование.ЗаписатьСтрокуЛога();
	Логирование.ЗаписатьСтрокуЛога("Попытка отправки электронного сообщения:");
	КопироватьФайл(Логирование.ИмяФайлаЛога,ПолучитьИмяВременногоФайла("txt"));
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		Логирование.ЗаписатьСтрокуЛога("Отправлено электорнное сообщение на адреса: " + СтруктураСообщения.АдресЭлектроннойПочтыПолучателя);
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось отправить электронное сообщение с smtp-сервера: " + УчетнаяЗаписьЭП.АдресSMTP);
		Логирование.ЗаписатьСтрокуЛога("	по причине " + УправлениеЭП.ТекстОшибки);
		БылиОшибки = Истина;
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);

КонецЕсли;
	
	
	
	
	

